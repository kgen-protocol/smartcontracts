{
  "address": "0xCE890A187eF0198972D22Ae0fA128540E5c613d7",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAlreadyWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "KgenGasFeeTreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "KgenTdsFeeTreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenRemovedFromWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newForwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KGEN_GAS_FEE_TREASURY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KGEN_TDS_FEE_TREASURY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tsddFeeTreasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gasFeeTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "setKgenGasFeeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "setKgenTdsFeeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isTrusted",
          "type": "bool"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferKgenToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tdsFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferKgenTokenWithTDS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6edc64e94ddc2dab7757d2e2e1b909e168ac23b3d88b2fc869ddbe62c0c72e59",
  "receipt": {
    "to": null,
    "from": "0xfdAB4890ed81C416c9FF325e63c6B20B1691647B",
    "contractAddress": "0xCE890A187eF0198972D22Ae0fA128540E5c613d7",
    "transactionIndex": 6,
    "gasUsed": "1245731",
    "logsBloom": "0x
    "blockHash": "0xea794d72b63a15b007ebffac3ebfbb0e0962bbc00dbd31cf39e469c47ae9b759",
    "transactionHash": "0x6edc64e94ddc2dab7757d2e2e1b909e168ac23b3d88b2fc869ddbe62c0c72e59",
    "logs": [],
    "blockNumber": 66239231,
    "cumulativeGasUsed": "1405126",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d20a0f749098198c3285856555e4c748",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"KgenGasFeeTreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"KgenTdsFeeTreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newForwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KGEN_GAS_FEE_TREASURY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KGEN_TDS_FEE_TREASURY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tsddFeeTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasFeeTreasuryAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setKgenGasFeeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setKgenTdsFeeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTrusted\",\"type\":\"bool\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferKgenToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tdsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferKgenTokenWithTDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,address)\":{\"params\":{\"_trustedForwarder\":\"ERC-2771 trusted forwarder\",\"admin\":\"Address to be granted admin roles\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferKgenToken(address,address,address,uint256,uint256)\":{\"details\":\"Transfer KGEN (or any ERC20) with a gas/treasury fee deduction.      The caller must have approved this contract to spend `amount + gasFee`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,address,address)\":{\"notice\":\"Initialize the proxy (instead of a constructor)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KgenTokenWrapper.sol\":\"KgenTokenWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85a70e2b1b65e9ba456add364d22b97eb9944083df1c39c0b4bd6a4b5aa386a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x6694b63ddb2c59bbe341c846171798350e8f72fa02189fcdeaca864e28b54e1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/ERC2771Context/ERC2771ContextUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ERC2771ContextUpgradable is\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    function isTrustedForwarder(\\n        address forwarder\\n    ) public view virtual returns (bool) {}\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (\\n            isTrustedForwarder(msg.sender) &&\\n            calldataLength >= contextSuffixLength\\n        ) {\\n            return\\n                address(\\n                    bytes20(msg.data[calldataLength - contextSuffixLength:])\\n                );\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (bytes calldata)\\n    {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (\\n            isTrustedForwarder(msg.sender) &&\\n            calldataLength >= contextSuffixLength\\n        ) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0xd7eb1c404942853caf047d9171e61d6dd71b75419069a4343f9c61165808e49e\",\"license\":\"MIT\"},\"contracts/KgenTokenWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// OpenZeppelin Upgradeable imports\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"./ERC2771Context/ERC2771ContextUpgradable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract KgenTokenWrapper is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    ERC2771ContextUpgradable,\\n    AccessControlUpgradeable\\n{\\n    // ------------------------------- Roles -------------------------------\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\n\\n    // ------------------------------- Errors ------------------------------\\n    error TokenNotWhitelisted();\\n    error InsufficientBalance();\\n    error InvalidAddress();\\n    error ZeroAmount();\\n    error TokenAlreadyWhitelisted();\\n\\n    // ------------------------------ Storage ------------------------------\\n    address public KGEN_TDS_FEE_TREASURY_ADDRESS;\\n    address public KGEN_GAS_FEE_TREASURY_ADDRESS;\\n\\n    // ------------------------------- Events ------------------------------\\n    event TokenTransferred(\\n        address indexed sender,\\n        address indexed recipient,\\n        address indexed treasury,\\n        address tokenAddress,\\n        uint256 amount,\\n        uint256 gasFee\\n    );\\n    event KgenTdsFeeTreasuryUpdated(address indexed previous, address indexed current);\\n    event KgenGasFeeTreasuryUpdated(address indexed previous, address indexed current);\\n    event TokenWhitelisted(address indexed tokenAddress);\\n    event TokenRemovedFromWhitelist(address indexed tokenAddress);\\n    event TrustedForwarderUpdated(address indexed newForwarder);\\n\\n    // ---------------------------- Initializer ----------------------------\\n    /// @notice Initialize the proxy (instead of a constructor)\\n    /// @param _trustedForwarder ERC-2771 trusted forwarder\\n    /// @param admin            Address to be granted admin roles\\n    function initialize(address _trustedForwarder, address admin, address tsddFeeTreasuryAddress,address gasFeeTreasuryAddress) public initializer {\\n        if (admin == address(0)) revert InvalidAddress();\\n        if (_trustedForwarder == address(0)) revert InvalidAddress();\\n        if (tsddFeeTreasuryAddress == address(0)) revert InvalidAddress();\\n        if (gasFeeTreasuryAddress == address(0)) revert InvalidAddress();\\n        __ReentrancyGuard_init();\\n        __AccessControl_init();\\n        // Grant roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(ADMIN_ROLE, admin);\\n        _grantRole(WITHDRAWER_ROLE, admin);\\n        // FIX: actually set the trusted forwarder\\n       KGEN_TDS_FEE_TREASURY_ADDRESS = tsddFeeTreasuryAddress;\\n       KGEN_GAS_FEE_TREASURY_ADDRESS = gasFeeTreasuryAddress;\\n        trustedForwarder[_trustedForwarder] = true;\\n        emit TrustedForwarderUpdated(_trustedForwarder);\\n    }\\n\\n    // ------------------------ Core token transfer ------------------------\\n    /**\\n     * @dev Transfer KGEN (or any ERC20) with a gas/treasury fee deduction.\\n     *      The caller must have approved this contract to spend `amount + gasFee`.\\n     */\\n    function transferKgenToken(\\n        address tokenAddress,\\n        address treasury,\\n        address recipientAddress,\\n        uint256 gasFee,\\n        uint256 amount\\n    ) external nonReentrant {\\n        if (tokenAddress == address(0)) revert InvalidAddress();\\n        if (treasury == address(0)) revert InvalidAddress();\\n        if (recipientAddress == address(0)) revert InvalidAddress();\\n        if (amount == 0) revert ZeroAmount();\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        address sender = _msgSender();\\n\\n        uint256 totalRequired = amount + gasFee;\\n        if (token.balanceOf(sender) < totalRequired) revert InsufficientBalance();\\n\\n        // NB: The user must pre-approve this contract for `totalRequired`.\\n        require(token.transferFrom(sender, recipientAddress, amount), \\\"Transfer failed\\\");\\n\\n        if (gasFee > 0) {\\n            require(token.transferFrom(sender, treasury, gasFee), \\\"Gas fee transfer failed\\\");\\n        }\\n\\n        emit TokenTransferred(sender, recipientAddress, treasury, tokenAddress, amount, gasFee);\\n    }\\n\\n    function transferKgenTokenWithTDS(\\n        address tokenAddress,\\n        address recipientAddress,\\n        uint256 gasFee,\\n        uint256 tdsFee,\\n        uint256 amount\\n    ) external nonReentrant {\\n        if (tokenAddress == address(0)) revert InvalidAddress();\\n        if (recipientAddress == address(0)) revert InvalidAddress();\\n        if (amount == 0) revert ZeroAmount();\\n\\n        IERC20 token = IERC20(tokenAddress);\\n        address sender = _msgSender();\\n\\n        // FIX: include tdsFee in required total\\n        uint256 totalRequired = amount + gasFee + tdsFee;\\n        if (token.balanceOf(sender) < totalRequired) revert InsufficientBalance();\\n\\n        // Minimal guard: treasuries must be set if fees are non-zero\\n        if (gasFee > 0) {\\n            if (KGEN_GAS_FEE_TREASURY_ADDRESS == address(0)) revert InvalidAddress();\\n            require(token.transferFrom(sender, KGEN_GAS_FEE_TREASURY_ADDRESS, gasFee), \\\"Gas fee transfer failed\\\");\\n        }\\n        if (tdsFee > 0) {\\n            if (KGEN_TDS_FEE_TREASURY_ADDRESS == address(0)) revert InvalidAddress();\\n            require(token.transferFrom(sender, KGEN_TDS_FEE_TREASURY_ADDRESS, tdsFee), \\\"TDS fee transfer failed\\\");\\n        }\\n\\n        // NB: The user must pre-approve this contract for `totalRequired`.\\n        require(token.transferFrom(sender, recipientAddress, amount), \\\"Transfer failed\\\");\\n\\n        emit TokenTransferred(sender, recipientAddress, KGEN_GAS_FEE_TREASURY_ADDRESS, tokenAddress, amount, gasFee);\\n    }\\n    function setKgenTdsFeeTreasury(address newTreasury) external onlyRole(ADMIN_ROLE) {\\n        if (newTreasury == address(0)) revert InvalidAddress();\\n        address prev = KGEN_TDS_FEE_TREASURY_ADDRESS;\\n        KGEN_TDS_FEE_TREASURY_ADDRESS = newTreasury;\\n        emit KgenTdsFeeTreasuryUpdated(prev, newTreasury);\\n    }\\n\\n    function setKgenGasFeeTreasury(address newTreasury) external onlyRole(ADMIN_ROLE) {\\n        if (newTreasury == address(0)) revert InvalidAddress();\\n        address prev = KGEN_GAS_FEE_TREASURY_ADDRESS;\\n        KGEN_GAS_FEE_TREASURY_ADDRESS = newTreasury;\\n        emit KgenGasFeeTreasuryUpdated(prev, newTreasury);\\n    }\\n\\n    // ---------------------------- ERC-2771 Hooks -------------------------\\n    function setTrustedForwarder(\\n        address _trustedForwarder,\\n        bool _isTrusted\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        trustedForwarder[_trustedForwarder] = _isTrusted;\\n        emit TrustedForwarderUpdated(_trustedForwarder);\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return trustedForwarder[forwarder];\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradable)\\n        returns (address)\\n    {\\n        return ERC2771ContextUpgradable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradable._msgData();\\n    }\\n\\n    function _contextSuffixLength()\\n        internal\\n        view\\n        override(ContextUpgradeable, ERC2771ContextUpgradable)\\n        returns (uint256)\\n    {\\n        return ERC2771ContextUpgradable._contextSuffixLength();\\n    }\\n\\n    // ------------------------------ Storage gap --------------------------\\n    mapping (address => bool) public trustedForwarder;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xdebd864b3f21d087b85b8f74412dbc45283504ba875d75a5a34fc540148e50a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611590806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806376b88024116100ad578063c995fec911610071578063c995fec9146102a1578063d547741f146102b4578063dce85522146102c7578063e691d03b146102da578063f8c8765e146102ed57600080fd5b806376b880241461022957806385f438c11461024c57806391d1485414610273578063a217fddf14610286578063a69de04a1461028e57600080fd5b80632f4eb640116100f45780632f4eb6401461019757806336568abe146101c257806350becb69146101d5578063572b6c05146101e857806375b238fc1461021457600080fd5b806301ffc9a7146101265780630abea8311461014e578063248a9ca3146101635780632f2ff15d14610184575b600080fd5b61013961013436600461123d565b610300565b60405190151581526020015b60405180910390f35b61016161015c36600461128a565b610337565b005b6101766101713660046112df565b61067c565b604051908152602001610145565b6101616101923660046112f8565b61069e565b6000546101aa906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b6101616101d03660046112f8565b6106c0565b6101616101e3366004611324565b610708565b6101396101f6366004611324565b6001600160a01b031660009081526002602052604090205460ff1690565b61017660008051602061153b83398151915281565b610139610237366004611324565b60026020526000908152604090205460ff1681565b6101767f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e481565b6101396102813660046112f8565b610798565b610176600081565b61016161029c36600461133f565b6107d0565b6101616102af366004611324565b610bde565b6101616102c23660046112f8565b610c70565b6001546101aa906001600160a01b031681565b6101616102e836600461139a565b610c8c565b6101616102fb3660046113d1565b610ce6565b60006001600160e01b03198216637965db0b60e01b148061033157506301ffc9a760e01b6001600160e01b03198316145b92915050565b61033f610f47565b6001600160a01b0385166103665760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b03841661038d5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0383166103b45760405163e6c4247b60e01b815260040160405180910390fd5b806000036103d557604051631f2a200560e01b815260040160405180910390fd5b8460006103e0610f91565b905060006103ee858561143b565b6040516370a0823160e01b81526001600160a01b03848116600483015291925082918516906370a0823190602401602060405180830381865afa158015610439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045d919061144e565b101561047c57604051631e9acf1760e31b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038416906323b872dd906104ac9085908a908990600401611467565b6020604051808303816000875af11580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef919061148b565b6105325760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b84156105f1576040516323b872dd60e01b81526001600160a01b038416906323b872dd906105689085908b908a90600401611467565b6020604051808303816000875af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab919061148b565b6105f15760405162461bcd60e51b815260206004820152601760248201527611d85cc8199959481d1c985b9cd9995c8819985a5b1959604a1b6044820152606401610529565b604080516001600160a01b038a81168252602082018790529181018790528189169188811691908516907fa99f3e744ebfbcd89dc6df157ff3a9eee544ed65a42775585f85d5638e4d217e906060015b60405180910390a450505061067560017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b5050505050565b600090815260008051602061151b833981519152602052604090206001015490565b6106a78261067c565b6106b081610fc6565b6106ba8383610fda565b50505050565b6106c8610f91565b6001600160a01b0316816001600160a01b0316146106f95760405163334bd91960e11b815260040160405180910390fd5b6107038282611080565b505050565b60008051602061153b83398151915261072081610fc6565b6001600160a01b0382166107475760405163e6c4247b60e01b815260040160405180910390fd5b600080546001600160a01b038481166001600160a01b0319831681178455604051919092169283917f336c734b6a61fee3f5b9c766d6deb81fac45bec7312b5b1fad25c891e1ab72929190a3505050565b600091825260008051602061151b833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6107d8610f47565b6001600160a01b0385166107ff5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0384166108265760405163e6c4247b60e01b815260040160405180910390fd5b8060000361084757604051631f2a200560e01b815260040160405180910390fd5b846000610852610f91565b9050600084610861878661143b565b61086b919061143b565b6040516370a0823160e01b81526001600160a01b03848116600483015291925082918516906370a0823190602401602060405180830381865afa1580156108b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108da919061144e565b10156108f957604051631e9acf1760e31b815260040160405180910390fd5b85156109e5576001546001600160a01b03166109285760405163e6c4247b60e01b815260040160405180910390fd5b6001546040516323b872dd60e01b81526001600160a01b03808616926323b872dd9261095c92879216908b90600401611467565b6020604051808303816000875af115801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f919061148b565b6109e55760405162461bcd60e51b815260206004820152601760248201527611d85cc8199959481d1c985b9cd9995c8819985a5b1959604a1b6044820152606401610529565b8415610ad7576000546001600160a01b0316610a145760405163e6c4247b60e01b815260040160405180910390fd5b6000546040516323b872dd60e01b81526001600160a01b03808616926323b872dd92610a4892879216908a90600401611467565b6020604051808303816000875af1158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b919061148b565b610ad75760405162461bcd60e51b815260206004820152601760248201527f54445320666565207472616e73666572206661696c65640000000000000000006044820152606401610529565b6040516323b872dd60e01b81526001600160a01b038416906323b872dd90610b079085908b908990600401611467565b6020604051808303816000875af1158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a919061148b565b610b885760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610529565b600154604080516001600160a01b038b811682526020820188905291810189905291811691898216918516907fa99f3e744ebfbcd89dc6df157ff3a9eee544ed65a42775585f85d5638e4d217e90606001610641565b60008051602061153b833981519152610bf681610fc6565b6001600160a01b038216610c1d5760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b038481166001600160a01b0319831681179093556040519116919082907fe71cbed83df6c1e2d52ec0ea4973289d3dcbaeb069939d8a27ee3c22d59e188090600090a3505050565b610c798261067c565b610c8281610fc6565b6106ba8383611080565b6000610c9781610fc6565b6001600160a01b038316600081815260026020526040808220805460ff1916861515179055517fa4388ecc389b1390354ae0c65a856c0d7dd4fb648419f5d3ac0b99e38f46fd119190a2505050565b6000610cf061111a565b805490915060ff600160401b820416159067ffffffffffffffff16600081158015610d185750825b905060008267ffffffffffffffff166001148015610d355750303b155b905081158015610d43575080155b15610d615760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610d8b57845460ff60401b1916600160401b1785555b6001600160a01b038816610db25760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038916610dd95760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038716610e005760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038616610e275760405163e6c4247b60e01b815260040160405180910390fd5b610e2f611143565b610e37611155565b610e42600089610fda565b50610e5b60008051602061153b83398151915289610fda565b50610e867f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e489610fda565b50600080546001600160a01b03808a166001600160a01b0319928316178355600180548a831693169290921782558b1680835260026020526040808420805460ff1916909317909255905190917fa4388ecc389b1390354ae0c65a856c0d7dd4fb648419f5d3ac0b99e38f46fd1191a28315610f3c57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610f8b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000610f9b61115d565b905090565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b610fd781610fd2610f91565b6111b9565b50565b600060008051602061151b833981519152610ff58484610798565b611076576000848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561102c610f91565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610331565b6000915050610331565b600060008051602061151b83398151915261109b8484610798565b15611076576000848152602082815260408083206001600160a01b03871684529091529020805460ff191690556110d0610f91565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050610331565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610331565b61114b6111f6565b61115361121b565b565b6111536111f6565b33600090815260026020526040812054369060149060ff1680156111815750808210155b156111b15760003661119383856114a8565b61119e9282906114bb565b6111a7916114e5565b60601c9250505090565b339250505090565b6111c38282610798565b6111f25760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610529565b5050565b6111fe611223565b61115357604051631afcd79f60e31b815260040160405180910390fd5b610fa06111f6565b600061122d61111a565b54600160401b900460ff16919050565b60006020828403121561124f57600080fd5b81356001600160e01b03198116811461126757600080fd5b9392505050565b80356001600160a01b038116811461128557600080fd5b919050565b600080600080600060a086880312156112a257600080fd5b6112ab8661126e565b94506112b96020870161126e565b93506112c76040870161126e565b94979396509394606081013594506080013592915050565b6000602082840312156112f157600080fd5b5035919050565b6000806040838503121561130b57600080fd5b8235915061131b6020840161126e565b90509250929050565b60006020828403121561133657600080fd5b6112678261126e565b600080600080600060a0868803121561135757600080fd5b6113608661126e565b945061136e6020870161126e565b94979496505050506040830135926060810135926080909101359150565b8015158114610fd757600080fd5b600080604083850312156113ad57600080fd5b6113b68361126e565b915060208301356113c68161138c565b809150509250929050565b600080600080608085870312156113e757600080fd5b6113f08561126e565b93506113fe6020860161126e565b925061140c6040860161126e565b915061141a6060860161126e565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b8082018082111561033157610331611425565b60006020828403121561146057600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561149d57600080fd5b81516112678161138c565b8181038181111561033157610331611425565b600080858511156114cb57600080fd5b838611156114d857600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156115125780818660140360031b1b83161692505b50509291505056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b8c249e47a268f337fcbaf4df94f62169c08df4b7c504bf394f3d305a8d5eb3964736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806376b88024116100ad578063c995fec911610071578063c995fec9146102a1578063d547741f146102b4578063dce85522146102c7578063e691d03b146102da578063f8c8765e146102ed57600080fd5b806376b880241461022957806385f438c11461024c57806391d1485414610273578063a217fddf14610286578063a69de04a1461028e57600080fd5b80632f4eb640116100f45780632f4eb6401461019757806336568abe146101c257806350becb69146101d5578063572b6c05146101e857806375b238fc1461021457600080fd5b806301ffc9a7146101265780630abea8311461014e578063248a9ca3146101635780632f2ff15d14610184575b600080fd5b61013961013436600461123d565b610300565b60405190151581526020015b60405180910390f35b61016161015c36600461128a565b610337565b005b6101766101713660046112df565b61067c565b604051908152602001610145565b6101616101923660046112f8565b61069e565b6000546101aa906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b6101616101d03660046112f8565b6106c0565b6101616101e3366004611324565b610708565b6101396101f6366004611324565b6001600160a01b031660009081526002602052604090205460ff1690565b61017660008051602061153b83398151915281565b610139610237366004611324565b60026020526000908152604090205460ff1681565b6101767f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e481565b6101396102813660046112f8565b610798565b610176600081565b61016161029c36600461133f565b6107d0565b6101616102af366004611324565b610bde565b6101616102c23660046112f8565b610c70565b6001546101aa906001600160a01b031681565b6101616102e836600461139a565b610c8c565b6101616102fb3660046113d1565b610ce6565b60006001600160e01b03198216637965db0b60e01b148061033157506301ffc9a760e01b6001600160e01b03198316145b92915050565b61033f610f47565b6001600160a01b0385166103665760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b03841661038d5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0383166103b45760405163e6c4247b60e01b815260040160405180910390fd5b806000036103d557604051631f2a200560e01b815260040160405180910390fd5b8460006103e0610f91565b905060006103ee858561143b565b6040516370a0823160e01b81526001600160a01b03848116600483015291925082918516906370a0823190602401602060405180830381865afa158015610439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045d919061144e565b101561047c57604051631e9acf1760e31b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038416906323b872dd906104ac9085908a908990600401611467565b6020604051808303816000875af11580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef919061148b565b6105325760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b84156105f1576040516323b872dd60e01b81526001600160a01b038416906323b872dd906105689085908b908a90600401611467565b6020604051808303816000875af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab919061148b565b6105f15760405162461bcd60e51b815260206004820152601760248201527611d85cc8199959481d1c985b9cd9995c8819985a5b1959604a1b6044820152606401610529565b604080516001600160a01b038a81168252602082018790529181018790528189169188811691908516907fa99f3e744ebfbcd89dc6df157ff3a9eee544ed65a42775585f85d5638e4d217e906060015b60405180910390a450505061067560017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b5050505050565b600090815260008051602061151b833981519152602052604090206001015490565b6106a78261067c565b6106b081610fc6565b6106ba8383610fda565b50505050565b6106c8610f91565b6001600160a01b0316816001600160a01b0316146106f95760405163334bd91960e11b815260040160405180910390fd5b6107038282611080565b505050565b60008051602061153b83398151915261072081610fc6565b6001600160a01b0382166107475760405163e6c4247b60e01b815260040160405180910390fd5b600080546001600160a01b038481166001600160a01b0319831681178455604051919092169283917f336c734b6a61fee3f5b9c766d6deb81fac45bec7312b5b1fad25c891e1ab72929190a3505050565b600091825260008051602061151b833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6107d8610f47565b6001600160a01b0385166107ff5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0384166108265760405163e6c4247b60e01b815260040160405180910390fd5b8060000361084757604051631f2a200560e01b815260040160405180910390fd5b846000610852610f91565b9050600084610861878661143b565b61086b919061143b565b6040516370a0823160e01b81526001600160a01b03848116600483015291925082918516906370a0823190602401602060405180830381865afa1580156108b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108da919061144e565b10156108f957604051631e9acf1760e31b815260040160405180910390fd5b85156109e5576001546001600160a01b03166109285760405163e6c4247b60e01b815260040160405180910390fd5b6001546040516323b872dd60e01b81526001600160a01b03808616926323b872dd9261095c92879216908b90600401611467565b6020604051808303816000875af115801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f919061148b565b6109e55760405162461bcd60e51b815260206004820152601760248201527611d85cc8199959481d1c985b9cd9995c8819985a5b1959604a1b6044820152606401610529565b8415610ad7576000546001600160a01b0316610a145760405163e6c4247b60e01b815260040160405180910390fd5b6000546040516323b872dd60e01b81526001600160a01b03808616926323b872dd92610a4892879216908a90600401611467565b6020604051808303816000875af1158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b919061148b565b610ad75760405162461bcd60e51b815260206004820152601760248201527f54445320666565207472616e73666572206661696c65640000000000000000006044820152606401610529565b6040516323b872dd60e01b81526001600160a01b038416906323b872dd90610b079085908b908990600401611467565b6020604051808303816000875af1158015610b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4a919061148b565b610b885760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610529565b600154604080516001600160a01b038b811682526020820188905291810189905291811691898216918516907fa99f3e744ebfbcd89dc6df157ff3a9eee544ed65a42775585f85d5638e4d217e90606001610641565b60008051602061153b833981519152610bf681610fc6565b6001600160a01b038216610c1d5760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b038481166001600160a01b0319831681179093556040519116919082907fe71cbed83df6c1e2d52ec0ea4973289d3dcbaeb069939d8a27ee3c22d59e188090600090a3505050565b610c798261067c565b610c8281610fc6565b6106ba8383611080565b6000610c9781610fc6565b6001600160a01b038316600081815260026020526040808220805460ff1916861515179055517fa4388ecc389b1390354ae0c65a856c0d7dd4fb648419f5d3ac0b99e38f46fd119190a2505050565b6000610cf061111a565b805490915060ff600160401b820416159067ffffffffffffffff16600081158015610d185750825b905060008267ffffffffffffffff166001148015610d355750303b155b905081158015610d43575080155b15610d615760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610d8b57845460ff60401b1916600160401b1785555b6001600160a01b038816610db25760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038916610dd95760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038716610e005760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038616610e275760405163e6c4247b60e01b815260040160405180910390fd5b610e2f611143565b610e37611155565b610e42600089610fda565b50610e5b60008051602061153b83398151915289610fda565b50610e867f10dac8c06a04bec0b551627dad28bc00d6516b0caacd1c7b345fcdb5211334e489610fda565b50600080546001600160a01b03808a166001600160a01b0319928316178355600180548a831693169290921782558b1680835260026020526040808420805460ff1916909317909255905190917fa4388ecc389b1390354ae0c65a856c0d7dd4fb648419f5d3ac0b99e38f46fd1191a28315610f3c57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610f8b57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000610f9b61115d565b905090565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b610fd781610fd2610f91565b6111b9565b50565b600060008051602061151b833981519152610ff58484610798565b611076576000848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561102c610f91565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610331565b6000915050610331565b600060008051602061151b83398151915261109b8484610798565b15611076576000848152602082815260408083206001600160a01b03871684529091529020805460ff191690556110d0610f91565b6001600160a01b0316836001600160a01b0316857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a46001915050610331565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610331565b61114b6111f6565b61115361121b565b565b6111536111f6565b33600090815260026020526040812054369060149060ff1680156111815750808210155b156111b15760003661119383856114a8565b61119e9282906114bb565b6111a7916114e5565b60601c9250505090565b339250505090565b6111c38282610798565b6111f25760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610529565b5050565b6111fe611223565b61115357604051631afcd79f60e31b815260040160405180910390fd5b610fa06111f6565b600061122d61111a565b54600160401b900460ff16919050565b60006020828403121561124f57600080fd5b81356001600160e01b03198116811461126757600080fd5b9392505050565b80356001600160a01b038116811461128557600080fd5b919050565b600080600080600060a086880312156112a257600080fd5b6112ab8661126e565b94506112b96020870161126e565b93506112c76040870161126e565b94979396509394606081013594506080013592915050565b6000602082840312156112f157600080fd5b5035919050565b6000806040838503121561130b57600080fd5b8235915061131b6020840161126e565b90509250929050565b60006020828403121561133657600080fd5b6112678261126e565b600080600080600060a0868803121561135757600080fd5b6113608661126e565b945061136e6020870161126e565b94979496505050506040830135926060810135926080909101359150565b8015158114610fd757600080fd5b600080604083850312156113ad57600080fd5b6113b68361126e565b915060208301356113c68161138c565b809150509250929050565b600080600080608085870312156113e757600080fd5b6113f08561126e565b93506113fe6020860161126e565b925061140c6040860161126e565b915061141a6060860161126e565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b8082018082111561033157610331611425565b60006020828403121561146057600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561149d57600080fd5b81516112678161138c565b8181038181111561033157610331611425565b600080858511156114cb57600080fd5b838611156114d857600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156115125780818660140360031b1b83161692505b50509291505056fe02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b8c249e47a268f337fcbaf4df94f62169c08df4b7c504bf394f3d305a8d5eb3964736f6c63430008160033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,address,address)": {
        "params": {
          "_trustedForwarder": "ERC-2771 trusted forwarder",
          "admin": "Address to be granted admin roles"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferKgenToken(address,address,address,uint256,uint256)": {
        "details": "Transfer KGEN (or any ERC20) with a gas/treasury fee deduction.      The caller must have approved this contract to spend `amount + gasFee`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,address,address)": {
        "notice": "Initialize the proxy (instead of a constructor)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1172,
        "contract": "contracts/KgenTokenWrapper.sol:KgenTokenWrapper",
        "label": "KGEN_TDS_FEE_TREASURY_ADDRESS",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1174,
        "contract": "contracts/KgenTokenWrapper.sol:KgenTokenWrapper",
        "label": "KGEN_GAS_FEE_TREASURY_ADDRESS",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1705,
        "contract": "contracts/KgenTokenWrapper.sol:KgenTokenWrapper",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1709,
        "contract": "contracts/KgenTokenWrapper.sol:KgenTokenWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}