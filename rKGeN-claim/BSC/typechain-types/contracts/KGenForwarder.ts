/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ERC2771Forwarder {
  export type ForwardRequestDataStruct = {
    from: AddressLike;
    to: AddressLike;
    value: BigNumberish;
    gas: BigNumberish;
    deadline: BigNumberish;
    data: BytesLike;
    signature: BytesLike;
  };

  export type ForwardRequestDataStructOutput = [
    from: string,
    to: string,
    value: bigint,
    gas: bigint,
    deadline: bigint,
    data: string,
    signature: string
  ] & {
    from: string;
    to: string;
    value: bigint;
    gas: bigint;
    deadline: bigint;
    data: string;
    signature: string;
  };
}

export interface KGenForwarderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addTrustedRelayer"
      | "eip712Domain"
      | "execute"
      | "executeBatch"
      | "nonces"
      | "owner"
      | "pendingOwner"
      | "recoverForwardRequestSigner"
      | "removeTrustedRelayer"
      | "renounceOwnership"
      | "transferOwnership"
      | "trustedRelayers"
      | "verify"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "ExecutedForwardRequest"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "TrustedRelayerAdded"
      | "TrustedRelayerRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ERC2771Forwarder.ForwardRequestDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [ERC2771Forwarder.ForwardRequestDataStruct[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverForwardRequestSigner",
    values: [ERC2771Forwarder.ForwardRequestDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedRelayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [ERC2771Forwarder.ForwardRequestDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverForwardRequestSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedForwardRequestEvent {
  export type InputTuple = [
    signer: AddressLike,
    nonce: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [signer: string, nonce: bigint, success: boolean];
  export interface OutputObject {
    signer: string;
    nonce: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedRelayerAddedEvent {
  export type InputTuple = [relayer: AddressLike];
  export type OutputTuple = [relayer: string];
  export interface OutputObject {
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedRelayerRemovedEvent {
  export type InputTuple = [relayer: AddressLike];
  export type OutputTuple = [relayer: string];
  export interface OutputObject {
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KGenForwarder extends BaseContract {
  connect(runner?: ContractRunner | null): KGenForwarder;
  waitForDeployment(): Promise<this>;

  interface: KGenForwarderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addTrustedRelayer: TypedContractMethod<
    [relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  execute: TypedContractMethod<
    [request: ERC2771Forwarder.ForwardRequestDataStruct],
    [void],
    "payable"
  >;

  executeBatch: TypedContractMethod<
    [
      requests: ERC2771Forwarder.ForwardRequestDataStruct[],
      refundReceiver: AddressLike
    ],
    [void],
    "payable"
  >;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  recoverForwardRequestSigner: TypedContractMethod<
    [request: ERC2771Forwarder.ForwardRequestDataStruct],
    [[boolean, string]],
    "view"
  >;

  removeTrustedRelayer: TypedContractMethod<
    [relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedRelayers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  verify: TypedContractMethod<
    [request: ERC2771Forwarder.ForwardRequestDataStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addTrustedRelayer"
  ): TypedContractMethod<[relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [request: ERC2771Forwarder.ForwardRequestDataStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [
      requests: ERC2771Forwarder.ForwardRequestDataStruct[],
      refundReceiver: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverForwardRequestSigner"
  ): TypedContractMethod<
    [request: ERC2771Forwarder.ForwardRequestDataStruct],
    [[boolean, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeTrustedRelayer"
  ): TypedContractMethod<[relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedRelayers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [request: ERC2771Forwarder.ForwardRequestDataStruct],
    [boolean],
    "view"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutedForwardRequest"
  ): TypedContractEvent<
    ExecutedForwardRequestEvent.InputTuple,
    ExecutedForwardRequestEvent.OutputTuple,
    ExecutedForwardRequestEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TrustedRelayerAdded"
  ): TypedContractEvent<
    TrustedRelayerAddedEvent.InputTuple,
    TrustedRelayerAddedEvent.OutputTuple,
    TrustedRelayerAddedEvent.OutputObject
  >;
  getEvent(
    key: "TrustedRelayerRemoved"
  ): TypedContractEvent<
    TrustedRelayerRemovedEvent.InputTuple,
    TrustedRelayerRemovedEvent.OutputTuple,
    TrustedRelayerRemovedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ExecutedForwardRequest(address,uint256,bool)": TypedContractEvent<
      ExecutedForwardRequestEvent.InputTuple,
      ExecutedForwardRequestEvent.OutputTuple,
      ExecutedForwardRequestEvent.OutputObject
    >;
    ExecutedForwardRequest: TypedContractEvent<
      ExecutedForwardRequestEvent.InputTuple,
      ExecutedForwardRequestEvent.OutputTuple,
      ExecutedForwardRequestEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TrustedRelayerAdded(address)": TypedContractEvent<
      TrustedRelayerAddedEvent.InputTuple,
      TrustedRelayerAddedEvent.OutputTuple,
      TrustedRelayerAddedEvent.OutputObject
    >;
    TrustedRelayerAdded: TypedContractEvent<
      TrustedRelayerAddedEvent.InputTuple,
      TrustedRelayerAddedEvent.OutputTuple,
      TrustedRelayerAddedEvent.OutputObject
    >;

    "TrustedRelayerRemoved(address)": TypedContractEvent<
      TrustedRelayerRemovedEvent.InputTuple,
      TrustedRelayerRemovedEvent.OutputTuple,
      TrustedRelayerRemovedEvent.OutputObject
    >;
    TrustedRelayerRemoved: TypedContractEvent<
      TrustedRelayerRemovedEvent.InputTuple,
      TrustedRelayerRemovedEvent.OutputTuple,
      TrustedRelayerRemovedEvent.OutputObject
    >;
  };
}
