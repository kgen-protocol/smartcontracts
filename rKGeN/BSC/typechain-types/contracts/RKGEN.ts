/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RKGENInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BURN_VAULT_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MINTER_ROLE"
      | "TREASURY_ROLE"
      | "UPGRADER_ROLE"
      | "WHITELIST_RECEIVER_ROLE"
      | "WHITELIST_SENDER_ROLE"
      | "acceptAdminRole"
      | "addBurnVault"
      | "addMinter"
      | "addTreasuryAddress"
      | "addWhitelistReceiver"
      | "addWhitelistSender"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "decimals"
      | "freezeAccount"
      | "frozenAccounts"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoleMembers"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isTrustedForwarder"
      | "mint"
      | "name"
      | "nominateAdmin"
      | "nominatedAdmin"
      | "removeBurnVault"
      | "removeMinter"
      | "removeTreasuryAddress"
      | "removeWhitelistReceiver"
      | "removeWhitelistSender"
      | "renounceRole"
      | "revokeRole"
      | "setTrustedForwarder"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "trustedForwarder"
      | "unfreezeAccount"
      | "updateBurnVault"
      | "updateMinter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountFrozen"
      | "AccountUnfrozen"
      | "AddedReceiverAddress"
      | "AddedSenderAddress"
      | "AddedTreasuryAddress"
      | "Approval"
      | "Initialized"
      | "MintedToTreasury"
      | "NominatedAdminEvent"
      | "RemovedReceiverAddress"
      | "RemovedSenderAddress"
      | "RemovedTreasuryAddress"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transfer"
      | "UpdatedAdmin"
      | "UpdatedBurnVault"
      | "UpdatedMinter"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BURN_VAULT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHITELIST_RECEIVER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHITELIST_SENDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdminRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBurnVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "freezeAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "frozenAccounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMembers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nominateAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBurnVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBurnVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinter",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_VAULT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHITELIST_RECEIVER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHITELIST_SENDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBurnVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nominateAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBurnVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBurnVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinter",
    data: BytesLike
  ): Result;
}

export namespace AccountFrozenEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountUnfrozenEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddedReceiverAddressEvent {
  export type InputTuple = [msg: string, addedAddress: AddressLike];
  export type OutputTuple = [msg: string, addedAddress: string];
  export interface OutputObject {
    msg: string;
    addedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddedSenderAddressEvent {
  export type InputTuple = [msg: string, addedAddress: AddressLike];
  export type OutputTuple = [msg: string, addedAddress: string];
  export interface OutputObject {
    msg: string;
    addedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddedTreasuryAddressEvent {
  export type InputTuple = [msg: string, addedAddress: AddressLike];
  export type OutputTuple = [msg: string, addedAddress: string];
  export interface OutputObject {
    msg: string;
    addedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedToTreasuryEvent {
  export type InputTuple = [treasury: AddressLike, amount: BigNumberish];
  export type OutputTuple = [treasury: string, amount: bigint];
  export interface OutputObject {
    treasury: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NominatedAdminEventEvent {
  export type InputTuple = [role: string, nominatedAdmin: AddressLike];
  export type OutputTuple = [role: string, nominatedAdmin: string];
  export interface OutputObject {
    role: string;
    nominatedAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedReceiverAddressEvent {
  export type InputTuple = [msg: string, removedAddress: AddressLike];
  export type OutputTuple = [msg: string, removedAddress: string];
  export interface OutputObject {
    msg: string;
    removedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedSenderAddressEvent {
  export type InputTuple = [msg: string, removedAddress: AddressLike];
  export type OutputTuple = [msg: string, removedAddress: string];
  export interface OutputObject {
    msg: string;
    removedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedTreasuryAddressEvent {
  export type InputTuple = [msg: string, removedAddress: AddressLike];
  export type OutputTuple = [msg: string, removedAddress: string];
  export interface OutputObject {
    msg: string;
    removedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedAdminEvent {
  export type InputTuple = [role: string, addedAdmin: AddressLike];
  export type OutputTuple = [role: string, addedAdmin: string];
  export interface OutputObject {
    role: string;
    addedAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedBurnVaultEvent {
  export type InputTuple = [role: string, updatedAddress: AddressLike];
  export type OutputTuple = [role: string, updatedAddress: string];
  export interface OutputObject {
    role: string;
    updatedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedMinterEvent {
  export type InputTuple = [role: string, addedUser: AddressLike];
  export type OutputTuple = [role: string, addedUser: string];
  export interface OutputObject {
    role: string;
    addedUser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RKGEN extends BaseContract {
  connect(runner?: ContractRunner | null): RKGEN;
  waitForDeployment(): Promise<this>;

  interface: RKGENInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BURN_VAULT_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MINTER_ROLE: TypedContractMethod<[], [string], "view">;

  TREASURY_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADER_ROLE: TypedContractMethod<[], [string], "view">;

  WHITELIST_RECEIVER_ROLE: TypedContractMethod<[], [string], "view">;

  WHITELIST_SENDER_ROLE: TypedContractMethod<[], [string], "view">;

  acceptAdminRole: TypedContractMethod<[], [void], "nonpayable">;

  addBurnVault: TypedContractMethod<
    [newBurnVault: AddressLike],
    [void],
    "nonpayable"
  >;

  addMinter: TypedContractMethod<
    [newMinter: AddressLike],
    [void],
    "nonpayable"
  >;

  addTreasuryAddress: TypedContractMethod<
    [newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addWhitelistReceiver: TypedContractMethod<
    [newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addWhitelistSender: TypedContractMethod<
    [newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  freezeAccount: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  frozenAccounts: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  getRoleMembers: TypedContractMethod<[role: BytesLike], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [initialAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nominateAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  nominatedAdmin: TypedContractMethod<[], [string], "view">;

  removeBurnVault: TypedContractMethod<
    [burnVaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  removeMinter: TypedContractMethod<
    [minterAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  removeTreasuryAddress: TypedContractMethod<
    [treasuryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  removeWhitelistReceiver: TypedContractMethod<
    [receiverAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  removeWhitelistSender: TypedContractMethod<
    [senderAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setTrustedForwarder: TypedContractMethod<
    [_trustedForwarder: AddressLike, _isTrusted: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  trustedForwarder: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  unfreezeAccount: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBurnVault: TypedContractMethod<
    [newBurnVault: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMinter: TypedContractMethod<
    [newMinter: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BURN_VAULT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MINTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TREASURY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WHITELIST_RECEIVER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WHITELIST_SENDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptAdminRole"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBurnVault"
  ): TypedContractMethod<[newBurnVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addMinter"
  ): TypedContractMethod<[newMinter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addTreasuryAddress"
  ): TypedContractMethod<[newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addWhitelistReceiver"
  ): TypedContractMethod<[newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addWhitelistSender"
  ): TypedContractMethod<[newAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "freezeAccount"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "frozenAccounts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleMembers"
  ): TypedContractMethod<[role: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[initialAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nominateAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nominatedAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeBurnVault"
  ): TypedContractMethod<[burnVaultAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeMinter"
  ): TypedContractMethod<[minterAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeTreasuryAddress"
  ): TypedContractMethod<[treasuryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWhitelistReceiver"
  ): TypedContractMethod<[receiverAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWhitelistSender"
  ): TypedContractMethod<[senderAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedForwarder"
  ): TypedContractMethod<
    [_trustedForwarder: AddressLike, _isTrusted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustedForwarder"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unfreezeAccount"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBurnVault"
  ): TypedContractMethod<[newBurnVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinter"
  ): TypedContractMethod<[newMinter: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AccountFrozen"
  ): TypedContractEvent<
    AccountFrozenEvent.InputTuple,
    AccountFrozenEvent.OutputTuple,
    AccountFrozenEvent.OutputObject
  >;
  getEvent(
    key: "AccountUnfrozen"
  ): TypedContractEvent<
    AccountUnfrozenEvent.InputTuple,
    AccountUnfrozenEvent.OutputTuple,
    AccountUnfrozenEvent.OutputObject
  >;
  getEvent(
    key: "AddedReceiverAddress"
  ): TypedContractEvent<
    AddedReceiverAddressEvent.InputTuple,
    AddedReceiverAddressEvent.OutputTuple,
    AddedReceiverAddressEvent.OutputObject
  >;
  getEvent(
    key: "AddedSenderAddress"
  ): TypedContractEvent<
    AddedSenderAddressEvent.InputTuple,
    AddedSenderAddressEvent.OutputTuple,
    AddedSenderAddressEvent.OutputObject
  >;
  getEvent(
    key: "AddedTreasuryAddress"
  ): TypedContractEvent<
    AddedTreasuryAddressEvent.InputTuple,
    AddedTreasuryAddressEvent.OutputTuple,
    AddedTreasuryAddressEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MintedToTreasury"
  ): TypedContractEvent<
    MintedToTreasuryEvent.InputTuple,
    MintedToTreasuryEvent.OutputTuple,
    MintedToTreasuryEvent.OutputObject
  >;
  getEvent(
    key: "NominatedAdminEvent"
  ): TypedContractEvent<
    NominatedAdminEventEvent.InputTuple,
    NominatedAdminEventEvent.OutputTuple,
    NominatedAdminEventEvent.OutputObject
  >;
  getEvent(
    key: "RemovedReceiverAddress"
  ): TypedContractEvent<
    RemovedReceiverAddressEvent.InputTuple,
    RemovedReceiverAddressEvent.OutputTuple,
    RemovedReceiverAddressEvent.OutputObject
  >;
  getEvent(
    key: "RemovedSenderAddress"
  ): TypedContractEvent<
    RemovedSenderAddressEvent.InputTuple,
    RemovedSenderAddressEvent.OutputTuple,
    RemovedSenderAddressEvent.OutputObject
  >;
  getEvent(
    key: "RemovedTreasuryAddress"
  ): TypedContractEvent<
    RemovedTreasuryAddressEvent.InputTuple,
    RemovedTreasuryAddressEvent.OutputTuple,
    RemovedTreasuryAddressEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedAdmin"
  ): TypedContractEvent<
    UpdatedAdminEvent.InputTuple,
    UpdatedAdminEvent.OutputTuple,
    UpdatedAdminEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedBurnVault"
  ): TypedContractEvent<
    UpdatedBurnVaultEvent.InputTuple,
    UpdatedBurnVaultEvent.OutputTuple,
    UpdatedBurnVaultEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedMinter"
  ): TypedContractEvent<
    UpdatedMinterEvent.InputTuple,
    UpdatedMinterEvent.OutputTuple,
    UpdatedMinterEvent.OutputObject
  >;

  filters: {
    "AccountFrozen(address)": TypedContractEvent<
      AccountFrozenEvent.InputTuple,
      AccountFrozenEvent.OutputTuple,
      AccountFrozenEvent.OutputObject
    >;
    AccountFrozen: TypedContractEvent<
      AccountFrozenEvent.InputTuple,
      AccountFrozenEvent.OutputTuple,
      AccountFrozenEvent.OutputObject
    >;

    "AccountUnfrozen(address)": TypedContractEvent<
      AccountUnfrozenEvent.InputTuple,
      AccountUnfrozenEvent.OutputTuple,
      AccountUnfrozenEvent.OutputObject
    >;
    AccountUnfrozen: TypedContractEvent<
      AccountUnfrozenEvent.InputTuple,
      AccountUnfrozenEvent.OutputTuple,
      AccountUnfrozenEvent.OutputObject
    >;

    "AddedReceiverAddress(string,address)": TypedContractEvent<
      AddedReceiverAddressEvent.InputTuple,
      AddedReceiverAddressEvent.OutputTuple,
      AddedReceiverAddressEvent.OutputObject
    >;
    AddedReceiverAddress: TypedContractEvent<
      AddedReceiverAddressEvent.InputTuple,
      AddedReceiverAddressEvent.OutputTuple,
      AddedReceiverAddressEvent.OutputObject
    >;

    "AddedSenderAddress(string,address)": TypedContractEvent<
      AddedSenderAddressEvent.InputTuple,
      AddedSenderAddressEvent.OutputTuple,
      AddedSenderAddressEvent.OutputObject
    >;
    AddedSenderAddress: TypedContractEvent<
      AddedSenderAddressEvent.InputTuple,
      AddedSenderAddressEvent.OutputTuple,
      AddedSenderAddressEvent.OutputObject
    >;

    "AddedTreasuryAddress(string,address)": TypedContractEvent<
      AddedTreasuryAddressEvent.InputTuple,
      AddedTreasuryAddressEvent.OutputTuple,
      AddedTreasuryAddressEvent.OutputObject
    >;
    AddedTreasuryAddress: TypedContractEvent<
      AddedTreasuryAddressEvent.InputTuple,
      AddedTreasuryAddressEvent.OutputTuple,
      AddedTreasuryAddressEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MintedToTreasury(address,uint256)": TypedContractEvent<
      MintedToTreasuryEvent.InputTuple,
      MintedToTreasuryEvent.OutputTuple,
      MintedToTreasuryEvent.OutputObject
    >;
    MintedToTreasury: TypedContractEvent<
      MintedToTreasuryEvent.InputTuple,
      MintedToTreasuryEvent.OutputTuple,
      MintedToTreasuryEvent.OutputObject
    >;

    "NominatedAdminEvent(string,address)": TypedContractEvent<
      NominatedAdminEventEvent.InputTuple,
      NominatedAdminEventEvent.OutputTuple,
      NominatedAdminEventEvent.OutputObject
    >;
    NominatedAdminEvent: TypedContractEvent<
      NominatedAdminEventEvent.InputTuple,
      NominatedAdminEventEvent.OutputTuple,
      NominatedAdminEventEvent.OutputObject
    >;

    "RemovedReceiverAddress(string,address)": TypedContractEvent<
      RemovedReceiverAddressEvent.InputTuple,
      RemovedReceiverAddressEvent.OutputTuple,
      RemovedReceiverAddressEvent.OutputObject
    >;
    RemovedReceiverAddress: TypedContractEvent<
      RemovedReceiverAddressEvent.InputTuple,
      RemovedReceiverAddressEvent.OutputTuple,
      RemovedReceiverAddressEvent.OutputObject
    >;

    "RemovedSenderAddress(string,address)": TypedContractEvent<
      RemovedSenderAddressEvent.InputTuple,
      RemovedSenderAddressEvent.OutputTuple,
      RemovedSenderAddressEvent.OutputObject
    >;
    RemovedSenderAddress: TypedContractEvent<
      RemovedSenderAddressEvent.InputTuple,
      RemovedSenderAddressEvent.OutputTuple,
      RemovedSenderAddressEvent.OutputObject
    >;

    "RemovedTreasuryAddress(string,address)": TypedContractEvent<
      RemovedTreasuryAddressEvent.InputTuple,
      RemovedTreasuryAddressEvent.OutputTuple,
      RemovedTreasuryAddressEvent.OutputObject
    >;
    RemovedTreasuryAddress: TypedContractEvent<
      RemovedTreasuryAddressEvent.InputTuple,
      RemovedTreasuryAddressEvent.OutputTuple,
      RemovedTreasuryAddressEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdatedAdmin(string,address)": TypedContractEvent<
      UpdatedAdminEvent.InputTuple,
      UpdatedAdminEvent.OutputTuple,
      UpdatedAdminEvent.OutputObject
    >;
    UpdatedAdmin: TypedContractEvent<
      UpdatedAdminEvent.InputTuple,
      UpdatedAdminEvent.OutputTuple,
      UpdatedAdminEvent.OutputObject
    >;

    "UpdatedBurnVault(string,address)": TypedContractEvent<
      UpdatedBurnVaultEvent.InputTuple,
      UpdatedBurnVaultEvent.OutputTuple,
      UpdatedBurnVaultEvent.OutputObject
    >;
    UpdatedBurnVault: TypedContractEvent<
      UpdatedBurnVaultEvent.InputTuple,
      UpdatedBurnVaultEvent.OutputTuple,
      UpdatedBurnVaultEvent.OutputObject
    >;

    "UpdatedMinter(string,address)": TypedContractEvent<
      UpdatedMinterEvent.InputTuple,
      UpdatedMinterEvent.OutputTuple,
      UpdatedMinterEvent.OutputObject
    >;
    UpdatedMinter: TypedContractEvent<
      UpdatedMinterEvent.InputTuple,
      UpdatedMinterEvent.OutputTuple,
      UpdatedMinterEvent.OutputObject
    >;
  };
}
